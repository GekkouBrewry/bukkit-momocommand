# 请按照格式写, 一个文件里可以有无数个 mechanic (机制)

# javascript 机制示例
-
  # 机制名称
  name: JsExample
  # 机制类型, 有 cmdgroup (命令组), javascript
  type: javascript
  # js 中可以使用一些预定义变量 具体参阅 wiki
  # 使用 | 使后面能直接写多行的字符串
  text: |
    print("hello, javascript")
    print("hello, " + $s.getName())

# 命令组 机制示例
-
  name: CmdExample
  # 命令每行一条 可以使用变量 具体参阅 wiki
  text: |
    say hello, world
    say hello, $s
  type: cmdgroup
  # 用来发送这些命令的人
  # 不填写则默认为玩家 op则具有op权限执行 console则用控制台执行
  sender: op
-
  text: |
    print("whooooha!")
    print("you are a " + $senderType + "!")
    print("your name is " + $s.getName() + "!")
    print("you are executing command " + $cmd + "!")
  name: another
  type: javascript
- # 示例: 使用参数的 mechanic
  # 你可以访问 $args 变量(一个字符串数组), 也可以访问 $arg索引, 如第一个参数是 $arg0 变量
  # 千万注意哦! 参数的索引从 0 开始
  name: argmec
  type: javascript
  text: |
    if($args.length > 0) {
      $s.sendMessage("you executed this command with " + $argc + " args.")
      var s = "args:"
      for(var i = 0; i < $args.length; ++i){
        s = s + " " + $args[i]
      }
      $s.sendMessage(s)
      $s.sendMessage("the first argument is: " + $arg0)
    } else {
      $sender.sendMessage("you executed this command without args")
    }
-
  name: argcmdmec
  type: cmdgroup
  sender: console
  text: |
    say $arg0

-
  name: papi0
  type: cmdgroup
  sender: op
  # 使用%变量%来调用papi变量
  text: |
    say %server_name%
    

-
  name: papi1
  type: javascript
  sender: op
  # 在javascript里，使用papi("%变量%")来调用papi变量
  text: |
    $s.sendMessage(papi("%server_name%"))
